
* After parsing, use another hash_map to help to free AST only once and only if
  they aren't in our final result AST.

* Need to free each cache value and the ASTs that aren't used in the final
  tree.

  After parsing, we need to do a traversal of the AST (if it's not NULL) and
  put each pointer into a hash map. Then, as we free the cache in the inner
  parser, we make sure that we don't free our final result AST but, do (only
  once) free the other cached AST values. When doing that, we need to
  recursively delete the AST results but keep track of those things we have
  already freed. We can't just do a non-recursive delete on each result not in
  our final tree because we aren't memoizing every expression so single
  character ASTs wouldn't be in the cache by them selves.

  Or, another way to do it would be to seperately keep track of the non-NULL
  AST results that have been put into the cache.
